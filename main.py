import sys
import threading
import asyncio
import time
import warnings

import streamlit as st
import openai
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import CommandStart

# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ–∫—Ä–µ—Ç—ã (Streamlit)
# -------------------------------
# –ë–µ—Ä—ë–º –∫–ª—é—á–∏ –∏–∑ Streamlit Cloud ‚Üí App ‚Üí Settings ‚Üí Secrets
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
TELEGRAM_TOKEN = st.secrets["TELEGRAM_TOKEN"]
GPT_ID = st.secrets["GPT_ID"]  # asst_...

# –£–±–∏—Ä–∞–µ–º –¥–µ–ø—Ä–µ–∫–µ–π—à–Ω-–≤–∞—Ä–Ω–∏–Ω–≥–∏ –ø—Ä–æ Assistants API
warnings.filterwarnings("ignore", category=DeprecationWarning)

# OpenAI (—Å—Ç–∞—Ä—ã–π Assistants API)
openai.api_key = OPENAI_API_KEY


# ==========================
#     TELEGRAM (aiogram 3)
# ==========================
async def tg_cmd_start(message: Message):
    await message.answer("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç?")

async def tg_handle_text(message: Message):
    user_text = message.text or ""
    try:
        # –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫ (thread) –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±–µ–∑ system prompt
        thread = openai.beta.threads.create(
            messages=[{"role": "user", "content": user_text}]
        )
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=GPT_ID,
        )

        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        while True:
            run_status = openai.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            if run_status.status == "completed":
                break
            if run_status.status == "failed":
                await message.answer("‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å.")
                return
            await asyncio.sleep(0.8)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        messages_list = openai.beta.threads.messages.list(thread_id=thread.id)
        reply = messages_list.data[0].content[0].text.value
        await message.answer(reply)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

def build_dispatcher() -> Dispatcher:
    dp = Dispatcher()
    dp.message.register(tg_cmd_start, CommandStart())
    dp.message.register(tg_handle_text, F.text)
    return dp

async def start_telegram_bot():
    bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
    dp = build_dispatcher()
    # skip —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è; –æ—Å—Ç–∞–≤–∏–º resolve_used_update_types()
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


# ==========================================================
#     –§–û–ù–û–í–´–ô –ó–ê–ü–£–°–ö –ë–û–¢–ê –î–õ–Ø –†–ï–ñ–ò–ú–ê STREAMLIT (–æ–¥–∏–Ω —Ä–∞–∑)
# ==========================================================
@st.cache_resource
def _bot_runtime():
    return {"started": False, "thread": None}

def start_bot_in_background_once():
    runtime = _bot_runtime()
    if runtime["started"]:
        return
    def _thread_target():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(start_telegram_bot())
        finally:
            loop.run_until_complete(loop.shutdown_asyncgens())
            loop.close()
    th = threading.Thread(target=_thread_target, name="tg-bot-thread", daemon=True)
    th.start()
    runtime["started"] = True
    runtime["thread"] = th


# ==================
#     STREAMLIT UI
# ==================
def streamlit_app():
    st.set_page_config(page_title="CheckDoc ‚Äî –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–æ–∫—Ç–æ—Ä", page_icon="üíä")
    st.title("üíä CheckDoc ‚Äî –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–æ–∫—Ç–æ—Ä")
    st.caption("Telegram-–±–æ—Ç + –≤–µ–±-—á–∞—Ç (Assistants API)")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram-–±–æ—Ç–∞"):
            start_bot_in_background_once()
            st.success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ–º—É –±–æ—Ç—É –≤ Telegram.")

    with col2:
        st.markdown("**–°—Ç–∞—Ç—É—Å:** –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ –¥–∞–∂–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

    st.divider()
    st.subheader("–í–µ–±-—á–∞—Ç")

    user_msg = st.text_input("–û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:")
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞") and user_msg.strip():
        try:
            thread = openai.beta.threads.create(
                messages=[{"role": "user", "content": user_msg.strip()}]
            )
            run = openai.beta.threads.runs.create(
                thread_id=thread.id,
                assistant_id=GPT_ID,
            )

            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Streamlit ‚Äî –±–µ–∑ await)
            while True:
                run_status = openai.beta.threads.runs.retrieve(
                    thread_id=thread.id,
                    run_id=run.id
                )
                if run_status.status == "completed":
                    break
                if run_status.status == "failed":
                    st.error("‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å.")
                    return
                time.sleep(0.8)

            messages_list = openai.beta.threads.messages.list(thread_id=thread.id)
            answer = messages_list.data[0].content[0].text.value
            st.markdown("**–û—Ç–≤–µ—Ç –ò–ò:**")
            st.write(answer)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

    st.divider()
    


# =================================
#     –¢–û–ß–ö–ò –í–•–û–î–ê –í –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# =================================
if "streamlit" in sys.modules:
    # –ó–∞–ø—É—Å–∫ –∫–∞–∫ Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (cloud/–ª–æ–∫–∞–ª—å–Ω–æ —Å `streamlit run main.py`)
    streamlit_app()
else:
    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞: python main.py  ‚Üí —Ç–æ–ª—å–∫–æ Telegram-–±–æ—Ç
    if __name__ == "__main__":
        asyncio.run(start_telegram_bot())