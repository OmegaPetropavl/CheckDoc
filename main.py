import sys
import threading
import asyncio
import time
import warnings

import streamlit as st
import openai
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import CommandStart

# =========================
#  –°–ï–ö–†–ï–¢–´ (Streamlit Cloud)
# =========================
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
TELEGRAM_TOKEN = st.secrets["TELEGRAM_TOKEN"]
GPT_ID         = st.secrets["GPT_ID"]  # –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (asst_...)

# –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ –≤ Telegram
TELEGRAM_BOT_LINK = "https://t.me/MedAdvice_bot"

# –ì–ª—É—à–∏–º DeprecationWarning –¥–ª—è Assistants API
warnings.filterwarnings("ignore", category=DeprecationWarning)

# OpenAI (—Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
openai.api_key = OPENAI_API_KEY


# ======================================================
#                TELEGRAM BOT (aiogram 3)
# ======================================================
async def tg_cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç.")

async def tg_handle_text(message: Message):
    user_text = message.text or ""
    try:
        # –î–ª—è Telegram: –∫–æ—Ä–æ—Ç–∫–∞—è —Å–µ—Å—Å–∏—è (–Ω–æ–≤—ã–π thread –Ω–∞ –∑–∞–ø—Ä–æ—Å)
        thread = openai.beta.threads.create(
            messages=[{"role": "user", "content": user_text}]
        )
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=GPT_ID,
        )

        while True:
            status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if status.status == "completed":
                break
            if status.status == "failed":
                await message.answer("‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å.")
                return
            await asyncio.sleep(0.8)

        msgs = openai.beta.threads.messages.list(thread_id=thread.id)
        reply = None
        for m in msgs.data:  # –∏—â–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            if m.role == "assistant":
                reply = m.content[0].text.value
                break
        await message.answer(reply or "‚ö†Ô∏è –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

def build_dp() -> Dispatcher:
    dp = Dispatcher()
    dp.message.register(tg_cmd_start, CommandStart())
    dp.message.register(tg_handle_text, F.text)
    return dp

async def start_telegram_bot():
    bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
    dp = build_dp()
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


# ======================================================
#      –§–û–ù–û–í–´–ô –ê–í–¢–û–°–¢–ê–†–¢ –ë–û–¢–ê –î–õ–Ø STREAMLIT
# ======================================================
@st.cache_resource
def _bot_runtime():
    """–ö—ç—à–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å."""
    return {"started": False, "thread": None}

def start_bot_in_background_once():
    rt = _bot_runtime()
    if rt["started"]:
        return
    def _target():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(start_telegram_bot())
        finally:
            loop.run_until_complete(loop.shutdown_asyncgens())
            loop.close()
    th = threading.Thread(target=_target, name="tg-bot-thread", daemon=True)
    th.start()
    rt["started"] = True
    rt["thread"] = th


# ======================================================
#                   STREAMLIT  UI (—á–∞—Ç)
# ======================================================
def init_chat_session():
    if "thread_id" not in st.session_state:
        # –î–ª—è –≤–µ–±-—á–∞—Ç–∞ —Å–æ–∑–¥–∞—ë–º PERSISTENT thread (–∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
        thread = openai.beta.threads.create()
        st.session_state.thread_id = thread.id
    if "messages" not in st.session_state:
        st.session_state.messages = []  # [{"role": "user"/"assistant", "content": str}, ...]

def render_chat():
    for msg in st.session_state.messages:
        with st.chat_message("user" if msg["role"] == "user" else "assistant"):
            st.markdown(msg["content"])

def add_user_message(text: str):
    st.session_state.messages.append({"role": "user", "content": text})

def add_assistant_message(text: str):
    st.session_state.messages.append({"role": "assistant", "content": text})

def ask_assistant_via_thread(user_text: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thread –≤–µ–±-—á–∞—Ç–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    thread_id = st.session_state.thread_id

    openai.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_text
    )
    run = openai.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=GPT_ID,
    )

    while True:
        status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if status.status == "completed":
            break
        if status.status == "failed":
            return "‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å."
        time.sleep(0.8)

    msgs = openai.beta.threads.messages.list(thread_id=thread_id)
    for m in msgs.data:
        if m.role == "assistant":
            return m.content[0].text.value
    return "‚ö†Ô∏è –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."

def streamlit_app():
    # üëâ –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç Telegram-–±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–±–µ–∑ –∫–Ω–æ–ø–∫–∏)
    start_bot_in_background_once()

    st.set_page_config(page_title="CheckDoc ‚Äî –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–æ–∫—Ç–æ—Ä", page_icon="üíä")
    st.title("üíä CheckDoc ‚Äî –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–æ–∫—Ç–æ—Ä")
    

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞
    st.link_button("–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ Telegram", TELEGRAM_BOT_LINK)

    st.divider()
    st.subheader("–í–µ–±-—á–∞—Ç")

    init_chat_session()
    render_chat()

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤ —Å—Ç–∏–ª–µ —á–∞—Ç–∞
    user_text = st.chat_input("–û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å‚Ä¶")
    if user_text:
        add_user_message(user_text)
        with st.chat_message("user"):
            st.markdown(user_text)

        # –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"):
            with st.spinner("–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶"):
                try:
                    answer = ask_assistant_via_thread(user_text)
                except Exception as e:
                    answer = f"–û—à–∏–±–∫–∞: {e}"
                st.markdown(answer)
                add_assistant_message(answer)

    st.divider()
    


# =================================
#     –¢–û–ß–ö–ò –í–•–û–î–ê (–æ–±–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è)
# =================================
if "streamlit" in sys.modules:
    # –ó–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí –≤–µ–± –∏ –±–æ—Ç –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ
    streamlit_app()
else:
    # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞ ‚Üí —Ç–æ–ª—å–∫–æ Telegram-–±–æ—Ç
    if __name__ == "__main__":
        asyncio.run(start_telegram_bot())
