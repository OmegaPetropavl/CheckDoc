import sys
import threading
import asyncio
import time
import warnings
import logging

import streamlit as st
import openai

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties  # ‚úÖ –¥–ª—è aiogram 3.7+

# ========= –°–ï–ö–†–ï–¢–´ =========
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
TELEGRAM_TOKEN = st.secrets["TELEGRAM_TOKEN"]
GPT_ID         = st.secrets["GPT_ID"]          # asst_...
TELEGRAM_LINK  = "https://t.me/MedAdvice_bot"  # ‚úÖ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞

# –ì–ª—É—à–∏–º DeprecationWarning –¥–ª—è Assistants API
warnings.filterwarnings("ignore", category=DeprecationWarning)

# OpenAI (—Å—Ç–∞—Ä—ã–π Assistants API)
openai.api_key = OPENAI_API_KEY

# ========= –õ–û–ì–ò =========
logger = logging.getLogger("checkdoc")
logger.setLevel(logging.INFO)
if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter("[%(levelname)s] %(asctime)s %(name)s: %(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

# ======= TELEGRAM BOT (aiogram 3.7+) =======
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç.")

async def cmd_ping(message: Message):
    await message.answer("üèì pong")

async def cmd_diag(message: Message):
    try:
        _ = OPENAI_API_KEY[:6] + "..."
        await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
    except Exception as e:
        await message.answer(f"‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {e!r}")

async def handle_text(message: Message):
    user_text = message.text or ""
    try:
        # 1) –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–æ—Ç–∫–∏–π thread –ø–æ–¥ –∑–∞–ø—Ä–æ—Å
        thread = openai.beta.threads.create(
            messages=[{"role": "user", "content": user_text}]
        )
        # 2) –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=GPT_ID,
        )
        # 3) –û–∂–∏–¥–∞–µ–º
        while True:
            status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if status.status == "completed":
                break
            if status.status == "failed":
                logger.error("Assistant run failed: %s", status)
                await message.answer("‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å.")
                return
            await asyncio.sleep(0.7)

        # 4) –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        msgs = openai.beta.threads.messages.list(thread_id=thread.id)
        reply = None
        for m in msgs.data:
            if m.role == "assistant":
                reply = m.content[0].text.value
                break
        if not reply:
            reply = "‚ö†Ô∏è –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await message.answer(reply)
    except Exception as e:
        logger.exception("Handler error:")
        await message.answer("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

def build_dp() -> Dispatcher:
    dp = Dispatcher()
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_ping,  Command("ping"))
    dp.message.register(cmd_diag,  Command("diag"))
    dp.message.register(handle_text, F.text)
    return dp

async def start_tg_polling():
    logger.info("Starting Telegram bot polling‚Ä¶")
    # ‚úÖ aiogram 3.7+: –≤–º–µ—Å—Ç–æ parse_mode –∏—Å–ø–æ–ª—å–∑—É–µ–º DefaultBotProperties
    bot = Bot(
        token=TELEGRAM_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = build_dp()
    await dp.start_polling(bot, handle_signals=False)   # –±–µ–∑ allowed_updates, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å
    logger.info("Polling finished.")

# ======= –§–û–ù–û–í–´–ô –ê–í–¢–û–°–¢–ê–†–¢ –ë–û–¢–ê –î–õ–Ø STREAMLIT =======
@st.cache_resource
def _bot_runtime():
    """–ß—Ç–æ–±—ã –±–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å Streamlit."""
    return {"started": False, "thread": None, "last_error": None}

def ensure_bot_running():
    rt = _bot_runtime()
    if rt["started"]:
        return
    def _target():
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(start_tg_polling())
        except Exception as e:
            rt["last_error"] = repr(e)
            logger.exception("Bot thread crashed:")
        finally:
            try:
                loop.run_until_complete(loop.shutdown_asyncgens())
            except Exception:
                pass
            loop.close()
    th = threading.Thread(target=_target, name="tg-bot-thread", daemon=True)
    th.start()
    rt["started"] = True
    rt["thread"] = th

# ======= STREAMLIT: —á–∞—Ç –Ω–∞ Assistants API —Å –∏—Å—Ç–æ—Ä–∏–µ–π =======
def init_chat_session():
    if "thread_id" not in st.session_state:
        thread = openai.beta.threads.create()
        st.session_state.thread_id = thread.id
    if "messages" not in st.session_state:
        st.session_state.messages = []  # [{"role": "user"/"assistant", "content": str}]

def render_chat():
    for m in st.session_state.messages:
        with st.chat_message("user" if m["role"] == "user" else "assistant"):
            st.markdown(m["content"])

def add_msg(role: str, text: str):
    st.session_state.messages.append({"role": role, "content": text})

def ask_assistant(user_text: str) -> str:
    thread_id = st.session_state.thread_id
    openai.beta.threads.messages.create(thread_id=thread_id, role="user", content=user_text)
    run = openai.beta.threads.runs.create(thread_id=thread_id, assistant_id=GPT_ID)
    while True:
        status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if status.status == "completed":
            break
        if status.status == "failed":
            return "‚ùå –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å."
        time.sleep(0.7)
    msgs = openai.beta.threads.messages.list(thread_id=thread_id)
    for m in msgs.data:
        if m.role == "assistant":
            return m.content[0].text.value
    return "‚ö†Ô∏è –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."

def streamlit_app():
    # –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    ensure_bot_running()

    st.set_page_config(page_title="CheckDoc ‚Äî –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–æ–∫—Ç–æ—Ä", page_icon="üíä")
    st.title("üíä CheckDoc ‚Äî –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–æ–∫—Ç–æ—Ä")
    st.link_button("–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ Telegram", TELEGRAM_LINK)

    # –°–∞–π–¥–±–∞—Ä ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å (–±–µ–∑ caption)
    rt = _bot_runtime()
    with st.sidebar:
        st.subheader("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
        st.write("‚úÖ –ó–∞–ø—É—â–µ–Ω" if rt["started"] else "‚è≥ –°—Ç–∞—Ä—Ç—É–µ—Ç—Å—è‚Ä¶")
        if rt["last_error"]:
            st.error(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {rt['last_error']}")
        st.write("–ö–æ–º–∞–Ω–¥—ã: /start, /ping, /diag")

    st.divider()
    st.subheader("–í–µ–±-—á–∞—Ç")

    init_chat_session()
    render_chat()

    user_text = st.chat_input("–û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å‚Ä¶")
    if user_text:
        add_msg("user", user_text)
        with st.chat_message("user"):
            st.markdown(user_text)

        with st.chat_message("assistant"):
            with st.spinner("–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶"):
                try:
                    answer = ask_assistant(user_text)
                except Exception as e:
                    answer = f"–û—à–∏–±–∫–∞: {e}"
                st.markdown(answer)
                add_msg("assistant", answer)

    st.divider()
    

# ======= –¢–û–ß–ö–ò –í–•–û–î–ê =======
if "streamlit" in sys.modules:
    streamlit_app()
else:
    if __name__ == "__main__":
        asyncio.run(start_tg_polling())
